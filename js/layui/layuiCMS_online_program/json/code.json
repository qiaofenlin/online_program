{
  "get_code": {
    "id" : 1,
    "text" : "#!/usr/bin/env python\n# encoding: utf-8\n'''\n@author: qfl\n@file: sort.py\n@time: 19-3-7 下午2:57\n@desc:\n'''\n\n# # 冒泡排序\n# def bubblesort(list):\n#     if len(list) <=1:\n#         return\n#     for i in range(len(list)-1):\n#         flag = False\n#         for j in range(len(list)-i-1):\n#             if list[j] > list[j+1]:\n#                 list[j],list[j+1] = list[j+1],list[j]\n#                 flag = True\n#         if flag is False:\n#             break\n#     return list\n#\n# # 插入排序\n#\n# def insertSort(arr):\n#     for i in range(1, len(arr)):\n#         j = i - 1\n#         key = arr[i]\n#         while j >= 0:\n#             if arr[j] > key:\n#                 arr[j + 1] = arr[j]\n#                 arr[j] = key\n#             j -= 1\n#     return arr\n#\n#\n# nums = [5,2,45,6,8,2,1]\n\n# print(bubblesort(nums))\n# print(insertSort(nums))\n\n\ndef QuickSort(arr, firstIndex, lastIndex):\n    if firstIndex < lastIndex:\n        divIndex = Partition(arr, firstIndex, lastIndex)\n        QuickSort(arr, firstIndex, divIndex)\n        QuickSort(arr, divIndex + 1, lastIndex)\n    else:\n        return\n\ndef Partition(arr, firstIndex, lastIndex):\n    i = firstIndex - 1\n    for j in range(firstIndex, lastIndex):\n        if arr[j] <= arr[lastIndex]:\n            i = i + 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[lastIndex] = arr[lastIndex], arr[i + 1]\n    return i\n\ndef Sort_Partition(arr,firstIndex, lastIndex):\n    i = firstIndex - 1\n    for j in range(firstIndex,lastIndex):\n        if arr[j] <= arr[lastIndex]:\n            i = i + 1\n            arr[i], arr[j] = arr[j],arr[i]\n    arr[i+1],arr[lastIndex] = arr[lastIndex],arr[i+1]\n    return i\n\n# def quickSort(arr,firstIndex,lastIndex):\n#     if firstIndex < lastIndex:\n#         divIndex = Sort_Partition(arr,firstIndex,lastIndex)\n#         quickSort(arr,firstIndex,divIndex)\n#         quickSort(arr,divIndex+1,lastIndex)\n#     else:\n#         # 终止条件\n#         return\n\n\n# print(\"initial array:\\n\", arr)\n# QuickSort(arr, 0, len(arr) - 1)\n# print(\"result array:\\n\", arr)\n\n# class Solution(object):\n#     def twoSum(self, nums, target):\n#         \"\"\"\n#         :type nums: List[int]\n#         :type target: int\n#         :rtype: List[int]\n#         \"\"\"\n#         result = []\n#         print(nums)\n#         for i, each in enumerate(nums):\n#             if abs(target-each) >=0 and i not in result:\n#                 try:\n#                     tmp = nums.index(target - each)\n#                     if tmp != i:\n#                         result.append(i)\n#                         result.append(tmp)\n#                 except:\n#                     continue\n#         return result\nclass Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) <= 1:\n            return False\n        buff_dict,list,list_all = {},[],[]\n        for i in range(len(nums)):\n            if nums[i] in buff_dict:\n                print(buff_dict)\n                list.append(buff_dict[nums[i]])\n                list.append(i)\n                list_all.append(list)\n                list = []\n            else:\n                buff_dict[target-nums[i]] = i\n        return list_all\n\nnums = [5,20,1,8,2, 7, 11, 15]\ntarget = 9\na=Solution()\nb = a.twoSum(nums,target)\nprint(b)\n\n\n# def quick(arr,first,last):\n#     if first < last:\n#         divIndex = P(arr,first,last)\n#         quick(arr,first,divIndex)\n#         quick(arr,divIndex + 1,last)\n#     else:\n#         return\n#\n# def P(arr,first,last):\n#     i = first - 1\n#     for j in range(first,last):\n#         if arr[j]<=arr[last]:\n#             i = i + 1\n#             arr[i],arr[j] = arr[j],arr[i]\n#     arr[last],arr[i+1] = arr[i+1],arr[last]\n#     return i\n\n# if __name__ == '__main__':\n#     arr = [1, 4, 7, 1, 5, 5, 3, 85, 34, 75, 23, 75, 2, 0]\n#\n#     print(\"initial array:\\n\", arr)\n#     quick(arr, 0, len(arr) - 1)\n#     print(\"result array:\\n\", arr)",
    "user_id": 1
  }
}